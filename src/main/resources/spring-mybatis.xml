<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
    xmlns="http://www.springframework.org/schema/beans" 
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://mybatis.org/schema/mybatis-spring 
       http://mybatis.org/schema/mybatis-spring.xsd">
   
   <!-- 整合mybatis中SqlSessionFactory
   1) SqlSessionFactoryBean 此对象底层基于SqlSessionFactoryBuilder创建SqlSessionFactory
   2) 所有的FactoryBean类型的对象由spring管理时都会创建两大bean对象
   2.1)FactoryBean子类类型的对象(如要获取此对象需要在bean的id前添加"&"符号)
   2.2)FactoryBean中getObject方法返回的对象-->    
   
   <bean id="sqlSessionFactory"
         class="org.mybatis.spring.SqlSessionFactoryBean">
      <!-- 基于property元素name属性的set方法为对象属性赋值 -->
      <property name="DataSource" ref="dataSource" />
      <property name="MapperLocations"
                value="classpath:mapper/sys/*.xml"/>
   </bean>
   

   
   <!-- 配置对指定包下dao接口的扫描
   1)系统底层会基于dao接口创建接口的实现类对象
   2)系统底层会将创建的实现对象存储到spring容器
   2.1)key为接口名,默认首字母小写
   2.2)value为dao接口的实现类对象 -->
   <!-- 
   <bean id="daoScanner" 
         class="org.mybatis.spring.mapper.MapperScannerConfigurer">
             <property name="BasePackage" 
                       value="com.db.**.dao"/>
             <property name="SqlSessionFactoryBeanName" 
                       value="sqlSessionFactory"/>
   </bean>
   -->
   <!-- 此方式是如上方式的升级版 -->
   <mybatis:scan base-package="com.db.**.dao" 
                 factory-ref="sqlSessionFactory"/>
  
</beans>





